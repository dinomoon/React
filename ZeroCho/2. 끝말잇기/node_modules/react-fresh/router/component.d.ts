import React, { PureComponent, ReactElement } from 'react';
interface RouteProps {
    path: string;
    children: ReactElement;
}
interface PureRouterProps {
    prefix: string;
    children?: any;
}
export declare class PureRouter extends PureComponent<PureRouterProps> {
    static routes: RouteProps[];
    static notFound?: ReactElement;
    static notAllowed?: ReactElement;
    static serverError?: ReactElement;
    static reset: () => void;
    static addRoute: (path: string, children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) => void;
    static setNotFound: (component: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) => void;
    static setNotAllowed: (component: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) => void;
    static setServerError: (component: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) => void;
    static redirect: (path: string) => void;
    render(): JSX.Element;
}
export {};
