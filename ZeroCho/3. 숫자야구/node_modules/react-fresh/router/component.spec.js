"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var component_1 = require("./component");
var react_router_dom_1 = require("react-router-dom");
var enzyme_1 = require("enzyme");
var MockComponent = function () { return react_1.default.createElement("div", { id: "mock" }); };
describe('PureRouter', function () {
    var generatePureRouter = function (prefix) {
        if (prefix === void 0) { prefix = '/'; }
        return enzyme_1.shallow(react_1.default.createElement(component_1.PureRouter, { prefix: prefix }));
    };
    beforeEach(function () { return component_1.PureRouter.reset(); });
    describe('addRoute', function () {
        it('will add a route', function () {
            expect(component_1.PureRouter.routes).toEqual([]);
            component_1.PureRouter.addRoute('test', react_1.default.createElement(MockComponent, null));
            expect(component_1.PureRouter.routes).toEqual([
                {
                    path: '/test',
                    children: react_1.default.createElement(MockComponent, null),
                },
            ]);
        });
        it('will throw an error if route already exists', function () {
            component_1.PureRouter.addRoute('test', react_1.default.createElement(MockComponent, null));
            expect(function () {
                return component_1.PureRouter.addRoute('test', react_1.default.createElement(MockComponent, null));
            }).toThrowError();
        });
        it('will render the routes', function () {
            component_1.PureRouter.addRoute('test', react_1.default.createElement(MockComponent, null));
            expect(generatePureRouter().contains(react_1.default.createElement(MockComponent, null))).toBeTruthy();
        });
    });
    describe('setNotFound', function () {
        it('will update the setNotFound component', function () {
            expect(component_1.PureRouter.notFound).toBeUndefined();
            component_1.PureRouter.setNotFound(react_1.default.createElement(MockComponent, null));
            expect(component_1.PureRouter.notFound).toEqual(react_1.default.createElement(MockComponent, null));
        });
        it('will add a route component for setNotFound', function () {
            component_1.PureRouter.setNotFound(react_1.default.createElement(MockComponent, null));
            var pureRouterComponent = generatePureRouter();
            expect(pureRouterComponent.find(react_router_dom_1.Route).props()).toEqual({
                children: react_1.default.createElement(MockComponent, null),
            });
        });
        it('will throw an error if setNotFound component already exists', function () {
            component_1.PureRouter.setNotFound(react_1.default.createElement(MockComponent, null));
            expect(function () { return component_1.PureRouter.setNotFound(react_1.default.createElement(MockComponent, null)); }).toThrowError();
        });
    });
    describe('setNotAllowed', function () {
        it('will update the setNotAllowed component', function () {
            expect(component_1.PureRouter.notAllowed).toBeUndefined();
            component_1.PureRouter.setNotAllowed(react_1.default.createElement(MockComponent, null));
            expect(component_1.PureRouter.notAllowed).toEqual(react_1.default.createElement(MockComponent, null));
        });
        it('will add a route component for setNotAllowed', function () {
            component_1.PureRouter.setNotAllowed(react_1.default.createElement(MockComponent, null));
            var pureRouterComponent = generatePureRouter();
            expect(pureRouterComponent
                .find(react_router_dom_1.Route)
                .at(0)
                .props()).toEqual({
                children: react_1.default.createElement(MockComponent, null),
                path: '/403',
            });
        });
        it('will throw an error if setNotAllowed component already exists', function () {
            component_1.PureRouter.setNotAllowed(react_1.default.createElement(MockComponent, null));
            expect(function () { return component_1.PureRouter.setNotAllowed(react_1.default.createElement(MockComponent, null)); }).toThrowError();
        });
    });
    describe('setServerError', function () {
        it('will update the setServerError component', function () {
            expect(component_1.PureRouter.serverError).toBeUndefined();
            component_1.PureRouter.setServerError(react_1.default.createElement(MockComponent, null));
            expect(component_1.PureRouter.serverError).toEqual(react_1.default.createElement(MockComponent, null));
        });
        it('will add a route component for setServerError', function () {
            component_1.PureRouter.setServerError(react_1.default.createElement(MockComponent, null));
            var pureRouterComponent = generatePureRouter();
            expect(pureRouterComponent
                .find(react_router_dom_1.Route)
                .at(0)
                .props()).toEqual({
                children: react_1.default.createElement(MockComponent, null),
                path: '/500',
            });
        });
        it('will throw an error if setServerError component already exists', function () {
            component_1.PureRouter.setServerError(react_1.default.createElement(MockComponent, null));
            expect(function () { return component_1.PureRouter.setServerError(react_1.default.createElement(MockComponent, null)); }).toThrowError();
        });
    });
    describe('redirect', function () {
        it('will call useHistory push', function () {
            component_1.PureRouter.redirect('test');
        });
    });
});
//# sourceMappingURL=component.spec.js.map