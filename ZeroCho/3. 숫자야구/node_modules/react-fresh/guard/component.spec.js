"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var component_1 = require("./component");
var enzyme_1 = require("enzyme");
var util_1 = require("../util");
var component_2 = require("../router/component");
describe('PureGuard', function () {
    var mockGuard = jest.fn();
    var generatePureGuard = function (rule) {
        return enzyme_1.shallow(react_1.default.createElement(component_1.PureGuard, { rule: rule, children: react_1.default.createElement(util_1.MockFunctionalComponent, null) }));
    };
    beforeEach(function () { return component_1.PureGuard.reset(); });
    describe('addGuard', function () {
        it('will add a guard', function () {
            expect(component_1.PureGuard.guards).toEqual({});
            component_1.PureGuard.addGuard('test', mockGuard);
            component_1.PureGuard.guards.test();
            expect(mockGuard).toBeCalledTimes(1);
        });
        it('will throw an error if guard already exists', function () {
            component_1.PureGuard.addGuard('test', mockGuard);
            expect(function () { return component_1.PureGuard.addGuard('test', mockGuard); }).toThrowError();
        });
    });
    describe('render', function () {
        it('will throw an error if rule does not exist', function () {
            expect(function () { return generatePureGuard('test').render(); }).toThrowError();
        });
        it('will call the redirect function if rule throws false', function () {
            var originalPureRouterRedirect = component_2.PureRouter.redirect.bind({});
            // @ts-ignore override PureRouter redirect with mock
            component_2.PureRouter.redirect = jest.fn();
            mockGuard.mockImplementation(function () { return false; });
            component_1.PureGuard.addGuard('test', mockGuard);
            generatePureGuard('test').render();
            expect(component_2.PureRouter.redirect).toBeCalledTimes(1);
            expect(component_2.PureRouter.redirect).toBeCalledWith('403');
            // @ts-ignore override PureRouter mock with original
            component_2.PureRouter.redirect = originalPureRouterRedirect;
        });
        it('will return children if rule returns true', function () {
            mockGuard.mockImplementation(function () { return true; });
            component_1.PureGuard.addGuard('test', mockGuard);
            var shallowGuard = generatePureGuard('test');
            expect(shallowGuard.find(util_1.MockFunctionalComponent).length).toEqual(1);
        });
    });
});
//# sourceMappingURL=component.spec.js.map